import { goToPage, logout, user } from '../index.js';
import { ADD_POSTS_PAGE, AUTH_PAGE, POSTS_PAGE } from '../routes.js';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 * –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —à–∞–ø–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º, –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤/–≤—Ö–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω).
 *
 * @param {HTMLElement} params.element - HTML-—ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫.
 * @returns {HTMLElement} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
 */
export function renderHeaderComponent({ element }) {
    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
     */
    const isDark = localStorage.getItem('darkMode') === 'true';
    if (isDark) {
      document.body.classList.add('dark-theme');
    }

    element.innerHTML = `
  <div class="page-header">
      <h1 class="logo">instapro</h1>
      <button class="header-button theme-toggle" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
        ${isDark ? '‚òÄÔ∏è' : 'üåô'}
      </button>
      <button class="header-button add-or-login-button">
      ${
          user
              ? `<div title="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç" class="add-post-sign"></div>`
              : '–í–æ–π—Ç–∏'
      }
      </button>
      ${
          user
              ? `<button title="${user.name}" class="header-button logout-button">–í—ã–π—Ç–∏</button>`
              : ''
      }
  </div>
  `;

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç"/"–í–æ–π—Ç–∏".
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
     */
    element
        .querySelector('.add-or-login-button')
        .addEventListener('click', () => {
            if (user) {
                goToPage(ADD_POSTS_PAGE);
            } else {
                goToPage(AUTH_PAGE);
            }
        });

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ª–æ–≥–æ—Ç–∏–ø—É.
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ—Å—Ç–∞–º–∏.
     */
    element.querySelector('.logo').addEventListener('click', () => {
        goToPage(POSTS_PAGE);
    });

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã–π—Ç–∏".
     * –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ç.–µ. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω), –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `logout`.
     */
    element.querySelector('.logout-button')?.addEventListener('click', logout);

    // Theme toggle handler
    const themeToggle = element.querySelector('.theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        const currentIsDark = document.body.classList.contains('dark-theme');
        const newIsDark = !currentIsDark;
        if (newIsDark) {
          document.body.classList.add('dark-theme');
        } else {
          document.body.classList.remove('dark-theme');
        }
        localStorage.setItem('darkMode', newIsDark);
        themeToggle.textContent = newIsDark ? '‚òÄÔ∏è' : 'üåô';
      });
    }

    return element;
}
